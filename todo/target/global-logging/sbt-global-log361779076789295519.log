[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\amin.hadi\AppData\Local\Temp\idea11.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\amin.hadi\AppData\Local\Temp\idea11.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.1 (Amazon.com Inc. Java 11.0.15)
[debug]       Load.loadUnit: plugins took 94.0812ms
[debug]       Load.loadUnit: defsScala took 0.289399ms
[debug] [Loading] Scanning directory C:\Users\amin.hadi\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amin.hadi\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.1451 ms
[debug]           Load.resolveProject(global-plugins) took 42.337299ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\amin.hadi\.sbt\1.0\plugins, plugins: List(<none>))) took 85.3705ms
[debug] [Loading] Done in C:\Users\amin.hadi\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 106.647299ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2257ms
[debug]     Load.loadUnit(file:/C:/Users/amin.hadi/.sbt/1.0/plugins/, ...) took 209.865699ms
[debug]   Load.apply: load took 364.0977ms
[debug]   Load.apply: resolveProjects took 5.3979ms
[debug]   Load.apply: finalTransforms took 63.8936ms
[debug]   Load.apply: config.delegates took 9.4768ms
[debug]   Load.apply: Def.make(settings)... took 435.235ms
[debug]   Load.apply: structureIndex took 100.913701ms
[debug]   Load.apply: mkStreams took 1.5873ms
[info] loading global plugins from C:\Users\amin.hadi\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2445.431101ms
[debug]           Load.loadUnit: plugins took 16.3157ms
[debug]           Load.loadUnit: defsScala took 0.0058ms
[debug] [Loading] Scanning directory C:\Users\amin.hadi\Documents\GitHub\effective-scala\todo\project
[debug]             Load.loadUnit: mkEval took 5.1762ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amin.hadi\Documents\GitHub\effective-scala\todo\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.207001 ms
[info] loading settings for project todo-build from buildSettings.sbt,plugins.sbt,idea11.sbt ...
[debug]               Load.resolveProject(todo-build) took 4.199899ms
[debug]             Load.loadTransitive: finalizeProject(Project(id todo-build, base: C:\Users\amin.hadi\Documents\GitHub\effective-scala\todo\project, plugins: List(<none>))) took 7.1102ms
[debug] [Loading] Done in C:\Users\amin.hadi\Documents\GitHub\effective-scala\todo\project, returning: (todo-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 154.3411ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.6188ms
[debug]         Load.loadUnit(file:/C:/Users/amin.hadi/Documents/GitHub/effective-scala/todo/project/, ...) took 177.3111ms
[debug]       Load.apply: load took 178.6035ms
[debug]       Load.apply: resolveProjects took 0.194699ms
[debug]       Load.apply: finalTransforms took 10.9495ms
[debug]       Load.apply: config.delegates took 0.5628ms
[debug]       Load.apply: Def.make(settings)... took 93.1455ms
[debug]       Load.apply: structureIndex took 24.4727ms
[debug]       Load.apply: mkStreams took 0.003301ms
[info] loading project definition from C:\Users\amin.hadi\Documents\GitHub\effective-scala\todo\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1069.3413ms
[debug]     Load.loadUnit: defsScala took 0.004101ms
[debug] [Loading] Scanning directory C:\Users\amin.hadi\Documents\GitHub\effective-scala\todo
[debug]       Load.loadUnit: mkEval took 0.3364ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amin.hadi\Documents\GitHub\effective-scala\todo, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(ch.epfl.lamp.StudentTasks), Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(scalafix.sbt.ScalafixPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(scalafix.sbt.ScalafixTestkitPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(ch.epfl.lamp.MOOCSettings),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(ch.epfl.lamp.StudentTasks),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(ch.epfl.lamp.StudentTasks),Set(Atom(ch.epfl.lamp.MOOCSettings)))
[debug] Clause(Atom(ch.epfl.lamp.CourseraStudent),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(ch.epfl.lamp.CourseraStudent),Set(Atom(ch.epfl.lamp.MOOCSettings)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(scalafix.sbt.ScalafixPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(And(Set(Atom(ch.epfl.lamp.StudentTasks), Atom(sbt.plugins.JvmPlugin), Atom(ch.epfl.lamp.MOOCSettings))),Set(Atom(ch.epfl.lamp.CourseraStudent))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,ch.epfl.lamp.StudentTasks,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,ch.epfl.lamp.MOOCSettings,sbt.plugins.JvmPlugin,ch.epfl.lamp.CourseraStudent,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,scalafix.sbt.ScalafixPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.445099 ms
[info] loading settings for project todo from assignment.sbt,build.sbt ...
[debug]         Load.resolveProject(todo) took 28.875899ms
[debug]       Load.loadTransitive: finalizeProject(Project(id todo, base: C:\Users\amin.hadi\Documents\GitHub\effective-scala\todo, plugins: List(<none>))) took 35.8749ms
[debug] [Loading] Done in C:\Users\amin.hadi\Documents\GitHub\effective-scala\todo, returning: (todo)
[debug]     Load.loadUnit: loadedProjectsRaw took 145.3593ms
[debug]     Load.loadUnit: cleanEvalClasses took 2.8657ms
[debug]   Load.loadUnit(file:/C:/Users/amin.hadi/Documents/GitHub/effective-scala/todo/, ...) took 1218.181801ms
[debug] Load.apply: load took 1219.7127ms
[debug] Load.apply: resolveProjects took 0.104ms
[debug] Load.apply: finalTransforms took 24.0295ms
[debug] Load.apply: config.delegates took 0.4288ms
[debug] Load.apply: Def.make(settings)... took 703.9213ms
[debug] Load.apply: structureIndex took 26.6892ms
[debug] Load.apply: mkStreams took 0.003001ms
[info] set current project to effective-scala-todo (in build file:/C:/Users/amin.hadi/Documents/GitHub/effective-scala/todo/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56379 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56379, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to effective-scala-todo (in build file:/C:/Users/amin.hadi/Documents/GitHub/effective-scala/todo/)
[debug] > Exec(idea-shell, None, None)
