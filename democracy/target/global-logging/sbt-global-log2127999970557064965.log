[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\amin.hadi\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\amin.hadi\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.1 (Amazon.com Inc. Java 11.0.15)
[debug]       Load.loadUnit: plugins took 95.5932ms
[debug]       Load.loadUnit: defsScala took 0.4137ms
[debug] [Loading] Scanning directory C:\Users\amin.hadi\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amin.hadi\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.6762 ms
[debug]           Load.resolveProject(global-plugins) took 48.7384ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\amin.hadi\.sbt\1.0\plugins, plugins: List(<none>))) took 89.0984ms
[debug] [Loading] Done in C:\Users\amin.hadi\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 112.2741ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1994ms
[debug]     Load.loadUnit(file:/C:/Users/amin.hadi/.sbt/1.0/plugins/, ...) took 217.2545ms
[debug]   Load.apply: load took 389.7084ms
[debug]   Load.apply: resolveProjects took 4.921ms
[debug]   Load.apply: finalTransforms took 61.8866ms
[debug]   Load.apply: config.delegates took 8.3416ms
[debug]   Load.apply: Def.make(settings)... took 446.5016ms
[debug]   Load.apply: structureIndex took 128.3409ms
[debug]   Load.apply: mkStreams took 5.0211ms
[info] loading global plugins from C:\Users\amin.hadi\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3214.2504ms
[debug]           Load.loadUnit: plugins took 18.8845ms
[debug]           Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory C:\Users\amin.hadi\Documents\GitHub\effective-scala\democracy\project
[debug]             Load.loadUnit: mkEval took 9.1137ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amin.hadi\Documents\GitHub\effective-scala\democracy\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7393 ms
[info] loading settings for project democracy-build from buildSettings.sbt,plugins.sbt,idea2.sbt ...
[debug]               Load.resolveProject(democracy-build) took 4.0808ms
[debug]             Load.loadTransitive: finalizeProject(Project(id democracy-build, base: C:\Users\amin.hadi\Documents\GitHub\effective-scala\democracy\project, plugins: List(<none>))) took 6.5908ms
[debug] [Loading] Done in C:\Users\amin.hadi\Documents\GitHub\effective-scala\democracy\project, returning: (democracy-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 225.4062ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.0961ms
[debug]         Load.loadUnit(file:/C:/Users/amin.hadi/Documents/GitHub/effective-scala/democracy/project/, ...) took 251.3612ms
[debug]       Load.apply: load took 252.9612ms
[debug]       Load.apply: resolveProjects took 0.1489ms
[debug]       Load.apply: finalTransforms took 9.8132ms
[debug]       Load.apply: config.delegates took 0.3118ms
[debug]       Load.apply: Def.make(settings)... took 76.899ms
[debug]       Load.apply: structureIndex took 22.2158ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\amin.hadi\Documents\GitHub\effective-scala\democracy\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1443.5668ms
[debug]     Load.loadUnit: defsScala took 0.0065ms
[debug] [Loading] Scanning directory C:\Users\amin.hadi\Documents\GitHub\effective-scala\democracy
[debug]       Load.loadUnit: mkEval took 0.3049ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\amin.hadi\Documents\GitHub\effective-scala\democracy, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(ch.epfl.lamp.StudentTasks), Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(scalafix.sbt.ScalafixPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(scalafix.sbt.ScalafixTestkitPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(ch.epfl.lamp.MOOCSettings),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(ch.epfl.lamp.StudentTasks),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(ch.epfl.lamp.StudentTasks),Set(Atom(ch.epfl.lamp.MOOCSettings)))
[debug] Clause(Atom(ch.epfl.lamp.CourseraStudent),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(ch.epfl.lamp.CourseraStudent),Set(Atom(ch.epfl.lamp.MOOCSettings)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(scalafix.sbt.ScalafixPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(And(Set(Atom(ch.epfl.lamp.StudentTasks), Atom(sbt.plugins.JvmPlugin), Atom(ch.epfl.lamp.MOOCSettings))),Set(Atom(ch.epfl.lamp.CourseraStudent))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,ch.epfl.lamp.StudentTasks,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,ch.epfl.lamp.MOOCSettings,sbt.plugins.JvmPlugin,ch.epfl.lamp.CourseraStudent,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,scalafix.sbt.ScalafixPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.9792 ms
[info] loading settings for project democracy from assignment.sbt,build.sbt ...
[debug]         Load.resolveProject(democracy) took 29.6724ms
[debug]       Load.loadTransitive: finalizeProject(Project(id democracy, base: C:\Users\amin.hadi\Documents\GitHub\effective-scala\democracy, plugins: List(<none>))) took 33.7176ms
[debug] [Loading] Done in C:\Users\amin.hadi\Documents\GitHub\effective-scala\democracy, returning: (democracy)
[debug]     Load.loadUnit: loadedProjectsRaw took 182.3256ms
[debug]     Load.loadUnit: cleanEvalClasses took 3.1686ms
[debug]   Load.loadUnit(file:/C:/Users/amin.hadi/Documents/GitHub/effective-scala/democracy/, ...) took 1629.7626ms
[debug] Load.apply: load took 1631.1601ms
[debug] Load.apply: resolveProjects took 0.1292ms
[debug] Load.apply: finalTransforms took 23.878ms
[debug] Load.apply: config.delegates took 0.3178ms
[debug] Load.apply: Def.make(settings)... took 664.1292ms
[debug] Load.apply: structureIndex took 23.755ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to effective-scala-democracy (in build file:/C:/Users/amin.hadi/Documents/GitHub/effective-scala/democracy/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56379 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56379, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to effective-scala-democracy (in build file:/C:/Users/amin.hadi/Documents/GitHub/effective-scala/democracy/)
[debug] > Exec(idea-shell, None, None)
